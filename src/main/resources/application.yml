spring:
  profiles:
    group:
      local: local_profile,common #h2
      dev: dev_profile,common #postgresql
      prod: prod_profile,common
      test: test, common
---
spring:
  config:
    activate:
      on-profile: prod_profile
  datasource:
    primary:
      hikari:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: org.postgresql.Driver
        username: ${AWS_AURORA_DB_WRITER_INS_USERNAME}
        password: ${AWS_AURORA_DB_WRITER_INS_PASSWORD}
        jdbc-url: ${AWS_AURORA_DB_WRITER_INS_JDBC_URL}
    secondary:
      hikari:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: org.postgresql.Driver
        username: ${AWS_AURORA_DB_READER_INS_USERNAME}
        password: ${AWS_AURORA_DB_READER_INS_PASSWORD}
        jdbc-url: ${AWS_AURORA_DB_READER_INS_JDBC_URL}
    hikari:
      pool-name: Hikari
      auto-commit: false
  jpa:
    properties:
      hibernate:
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
        show_sql: true
    open-in-view: false
  data:
    redis:
      host: ${REDIS_PROD_HOST}
      port: ${REDIS_PROD_PORT}
server:
  port: 8080
---
spring:
  config:
    activate:
      on-profile: dev_profile
  datasource:
    url: ${SPRING_DEV_DATASOURCE_URL}
    username: ${SPRING_DEV_DATASOURCE_USERNAME}
    password: ${SPRING_DEV_DATASOURCE_PASSWORD}
  jpa:
    properties:
      hibernate:
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
        show_sql: true
    open-in-view: false
  data:
    redis:
      host: ${REDIS_DEV_HOST}
      port: ${REDIS_DEV_PORT}
server:
  port: 8080
---
spring:
  config:
    activate:
      on-profile: local_profile
  datasource:
    url: ${SPRING_LOCAL_DATASOURCE_URL}
    username: ${SPRING_LOCAL_DATASOURCE_USERNAME}
    password: ${SPRING_LOCAL_DATASOURCE_PASSWORD}
  h2:
    console:
      enabled: true
  jpa:
    properties:
      hibernate:
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
        show_sql: true
    hibernate:
      ddl-auto: update
    open-in-view: false
  data:
    redis:
      host: ${REDIS_LOCAL_HOST}
      port: ${REDIS_LOCAL_PORT}
server:
  port: 8080
---
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:test;MODE=MySQL;
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    show-sql: true
    hibernate:
      ddl-auto:  create-drop
    properties:
      hibernate:
        format-sql: true
        highlight_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 1000
    open-in-view: false    # 추가
---
spring:
  config:
    activate:
      on-profile: common
  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${OAUTH_NAVER_CLIENTID}
            client-secret: ${OAUTH_NAVER_CLIENTSECRET}
            scope: ${OAUTH_NAVER_SCOPE}
            client-name: ${OAUTH_NAVER_CLIENTNAME}
            authorization-grant-type: ${OAUTH_NAVER_GRANTTYPE}
            redirect-uri: ${OAUTH_NAVER_REDIRECT}

        provider:
          naver:
            authorization-uri: ${OAUTH_NAVER_AUTHORIZATION_URI}
            token-uri: ${OAUTH_NAVER_TOKEN_URI}
            user-info-uri: ${OAUTH_NAVER_USER_INFO_URI}
            user-name-attribute: ${OAUTH_NAVER_USER_NAME_ATTRIBUTE}

auth:
  jwt:
    issuer: ${AUTH_JWT_ISSUER}
    secret: ${AUTH_JWT_SECRET}
    accessTokenExpirationHour: ${AUTH_JWT_ACCESSTOKENEXP}
    refreshTokenExpirationHour: ${AUTH_JWT_REFRESHTOKENEXP}
  front-host: ${AUTH_FRONT_HOST}
  redirect-url: ${AUTH_REDIRECT_URL}

cloud:
  aws:
    credentials:
      accessKey: ${AWS_S3_ACCESS_KEY}
      secretKey: ${AWS_S3_SECRET_KEY}
    s3:
      bucket: ${AWS_S3_BUCKET}
    ses:
      sender-email: ${AWS_S3_SENDER_MAIL}
    region:
      static: ${AWS_S3_REGION}
    stack:
      auto: false

logging:
  charset:
    console: UTF-8
  level:
    org:
      hibernate:
        SQL: debug
        orm:
          jdbc:
            bind: trace

management:
  endpoints:
    web:
      exposure:
        include: prometheus, openapi, swagger-ui
  endpoint:
    prometheus:
      enabled: true
